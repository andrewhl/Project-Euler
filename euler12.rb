# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?
def collect_primes(number)
  
  sieve = [nil, nil] + (2 .. number).to_a
  
  (2 .. Math.sqrt(number)).each do |n|
    next unless sieve[n]
    (n*n).step(number, n) do |num|
      sieve[num] = nil
    end
  end
  
  primes = []
  sieve.each do |x|
    if x != nil
      primes << x
    end
  end
  return primes
end


def find_triangle_numbers(num)

  triangle_numbers = []

  (1..num).each do |number|
    triangle_numbers << number * (number + 1)/2 # closed form for adding all positive integers up to n: n * (n+1)/2 
  end
  
  return triangle_numbers
end

def count_triangle_divisors(num)
  
  # 24 = (2 ** 3) * (3 ** 1)
  # # of factors: n = (p_1 ** x_1) * (p_2 ** x_2) * ... * (p_y ** x_y) 
  # (2 ** 3 + 1) * (3 ** 1 + 1)
  # (4) * ( 3 + 1)
  #
  
  # 36: 1, 2, 3, 4, 6, 9, 12, 18, 36
  # 2 * 18, 2 * 2 * 9, 2 * 2 * 3 * 3
  # (2 ** 2) * (3 ** 2)
  # (p ** (x+1)) * (p_1 ** (x_1 +1))
  # (x+1) * (x_1+1)
  
  # 1. Generate next prime
  # 2. If it divides n, keep dividing n by p, keep track of the number of times this goes
  # (now n has decreased)
  # 3. If n != 1, go to step 1
  # 3:53
  # If you run out of primes, you know that n is prime and will have only 2 divisors
  
  # result = 1
  # while n != 1:
  #     generate new prime p
  #     power = 0
  #     while (n % p == 0 ) :
  #         power = power + 1
  #         n = n/p
  #     result = result * (power + 1)
  # return result
  
  # triangle_divisors = []
  
  primes = collect_primes(num)
  triangle_numbers = find_triangle_numbers(num)
  triangle_numbers.each do |number|
    puts "Triangle number: #{number}"
    pos = 0
    result = 1
    while number != 1
      p = primes[pos]
      power = 0
      while (number % p == 0)
        power = power + 1
        number = number/p
      end
      result = result * (power + 1)
      pos += 1
      
    end
    
    puts "Number of divisors: #{result}"
    
    if result > 500
      return number
    end
    
    # triangle_divisors[triangle_numbers[number].index] = result
  
  end

  
  

  
end

puts count_triangle_divisors(100000)