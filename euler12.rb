# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?

def find_triangle_numbers(num)

  triangle_numbers = []
  numbers = (1..num).to_a

  numbers.each do |number|
    
    triangle_numbers << (numbers[0]..numbers[number-1]).inject(:+)
    
  end
  
  return triangle_numbers
end

def count_triangle_divisors(num)
  
  triangle_numbers = find_triangle_numbers(num)
  divisors = [0]
  divisor_lengths = [0]
  p = 1

  triangle_numbers.each do |number|
    puts "Triangle number: #{number}"
    divisors[p] = (1..number).select { |i| number % i == 0 }
    puts "Number of divisors: #{divisors[p].length}"
    puts "Position: #{p}"
    # divisor_lengths[p] = divisors[p].length
    
    if divisors[p].length > 500
      return number
    end
      
    p += 1

  end
  
  # if divisor_lengths.max > 100
  #   return triangle_numbers[divisor_lengths.index(divisor_lengths.max)]
  # else
  #   return "No number has more than 100 divisors"
  # end
  
end

puts count_triangle_divisors(100000).inspect